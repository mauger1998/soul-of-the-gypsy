---
import { urlForImage } from '../../lib/urlForImage'
import Button from '../Button.astro'
const { cards } = Astro.props

// split cards in to 2 equal arrays
const half = Math.ceil(cards.length / 2)
const firstHalf = cards.slice(0, half)
const secondHalf = cards.slice(-half)
---

<section class="inspo-section">
	<div class="wrapper">
		<div class="title">
			<h2>Kevs Inspiration</h2>
			<p>
				Lorem ipsum dolor sit amet consectetur adipisicing elit. Natus tempore ex aliquam eos,
				blanditiis assumenda molestias dolorum dolore sit soluta ea repellendus, dolorem
				consectetur? Ratione minima esse corrupti cupiditate et.
			</p>
		</div>
		<div class="marquee">
			<div class="track">
				<div class="cards">
					{
						firstHalf.map((card) => (
							<div class="card">
								<div class="mask">
									<img
										style={`object-position: ${card.image.hotspot.x * 100}% ${
											card.image.hotspot.y * 100
										}%;`}
										src={urlForImage(card.image).format('webp').url()}
										alt={card.image.alt}
									/>
								</div>
								<dialog>
									<img
										style={`object-position: ${card.image.hotspot.x * 100}% ${
											card.image.hotspot.y * 100
										}%;`}
										src={urlForImage(card.image).format('webp').url()}
										alt={card.image.alt}
									/>
									<div class="text">
										<h3>{card.title}</h3>
										<p>{card.description}</p>
										<Button text="See all art" variant="black-outline" to="/gallery/" />
									</div>
								</dialog>
							</div>
						))
					}
					{
						firstHalf.map((card) => (
							<div class="card">
								<div class="mask">
									<img
										style={`object-position: ${card.image.hotspot.x * 100}% ${
											card.image.hotspot.y * 100
										}%;`}
										src={urlForImage(card.image).format('webp').url()}
										alt={card.image.alt}
									/>
								</div>
								<dialog>
									<img
										style={`object-position: ${card.image.hotspot.x * 100}% ${
											card.image.hotspot.y * 100
										}%;`}
										src={urlForImage(card.image).format('webp').url()}
										alt={card.image.alt}
									/>
									<div class="text">
										<h3>{card.title}</h3>
										<p>{card.description}</p>
										<Button text="See all art" variant="black-outline" to="/gallery/" />
									</div>
								</dialog>
							</div>
						))
					}
				</div>
			</div>
			<div class="track track-reverse">
				<div class="cards">
					{
						secondHalf.map((card) => (
							<div class="card">
								<div class="mask">
									<img
										src={urlForImage(card.image).format('webp').url()}
										alt={card.image.alt}
										style={`object-position: ${card.image.hotspot.x * 100}% ${
											card.image.hotspot.y * 100
										}%;`}
									/>
								</div>
								<dialog>
									<img
										src={urlForImage(card.image).format('webp').url()}
										alt={card.image.alt}
										style={`object-position: ${card.image.hotspot.x * 100}% ${
											card.image.hotspot.y * 100
										}%;`}
									/>
									<div class="text">
										<h3>{card.title}</h3>
										<p>{card.description}</p>
										<Button text="See all art" variant="black-outline" to="/gallery/" />
									</div>
								</dialog>
							</div>
						))
					}
					{
						secondHalf.map((card) => (
							<div class="card">
								<div class="mask">
									<img
										src={urlForImage(card.image).format('webp').url()}
										alt={card.image.alt}
										style={`object-position: ${card.image.hotspot.x * 100}% ${
											card.image.hotspot.y * 100
										}%;`}
									/>
								</div>
								<dialog>
									<img
										src={urlForImage(card.image).format('webp').url()}
										alt={card.image.alt}
										style={`object-position: ${card.image.hotspot.x * 100}% ${
											card.image.hotspot.y * 100
										}%;`}
									/>
									<div class="text">
										<h3>{card.title}</h3>
										<p>{card.description}</p>
										<Button text="See all art" variant="black-outline" to="/gallery/" />
									</div>
								</dialog>
							</div>
						))
					}
				</div>
			</div>
		</div>
	</div>
</section>

<script>
	import { gsap } from 'gsap'
	import { ScrollTrigger } from 'gsap/ScrollTrigger'
	gsap.registerPlugin(ScrollTrigger)

	const inspirationTitles = document.querySelector('.inspo-section .title')
	const inspoH2 = inspirationTitles.querySelector('h2')
	const inspoP = inspirationTitles.querySelector('p')

	gsap.to([inspoH2, inspoP], {
		scrollTrigger: {
			trigger: inspirationTitles,
			start: 'top 80%',
			toggleActions: 'play none none reverse'
		},
		opacity: 1,
		y: 0,
		stagger: 0.2
	})

	gsap.to('.track .cards .card', {
		scrollTrigger: {
			trigger: '.track .cards .card',
			start: 'top 80%',
			toggleActions: 'play none none reverse'
		},
		clipPath: ' polygon(0.001% 0, 100% 0, 100% 100%, 0.001% 100%)',
		stagger: 0.05
	})

	const allInspoDialogs = document.querySelectorAll(
		'.inspo-section .marquee .track .cards .card dialog'
	)
	const allInspoCards = document.querySelectorAll('.inspo-section .marquee .track .cards .card')
	allInspoCards.forEach((card, index) => {
		card.addEventListener('click', () => {
			card.querySelector('dialog').showModal()
		})
		document.addEventListener('click', (event) => {
			if (event.target === allInspoDialogs[index]) {
				allInspoDialogs[index].close()
			}
		})
	})
</script>

<style lang="scss">
	.inspo-section {
		.wrapper {
			.title {
				h2 {
					color: $white;
					transform: translateY(4rem);
					opacity: 0;
				}
				p {
					max-width: 50ch;
					margin-block: 2.5rem 0;
					transform: translateY(4rem);
					opacity: 0;
				}
			}
			.marquee {
				display: flex;
				flex-direction: column;
				margin-block: 4rem 0;
				gap: 0;
				.track {
					animation: marquee 12s linear infinite alternate;
					width: 250%;
					.cards {
						display: flex;
						align-items: stretch;

						.card {
							position: relative;
							z-index: 0;
							clip-path: polygon(100% 0, 100% 0, 100% 100%, 100% 100%);
							cursor: pointer;

							dialog {
								position: fixed;
								top: 50%;
								left: 50%;
								transform: translate(-50%, -50%);
								width: clamp(350px, 50vw, 800px);

								&:focus {
									outline: none;
								}
								&::backdrop {
									background-color: #030303b5;
									backdrop-filter: blur(10px);
									-webkit-backdrop-filter: blur(10px);
								}

								.text {
									padding: 2rem;

									h3 {
										color: $black;
									}
									p {
										color: $black;
										margin-block: 1rem 1.5rem;
										max-width: 40ch;
									}
								}

								img {
									width: 100%;
									display: block;
									max-height: 400px;
									object-fit: cover;
									object-position: top;
								}
							}
							.mask {
								overflow: hidden;
								display: flex;
								img {
									height: 100%;
									height: 275px;
									width: 500px;
									object-fit: cover;
									object-position: top;
									transition: 300ms ease transform;
								}
							}
							&:hover {
								.mask {
									img {
										transform: scale(1.05);
										transition: 300ms ease transform;
									}
								}
							}
						}
					}
				}
				.track-reverse {
					animation-direction: alternate-reverse;
				}
				&:hover {
					.track,
					.track-reverse {
						animation-play-state: paused;
					}
				}
			}
		}
	}

	@keyframes marquee {
		0% {
			transform: translateX(-10%);
		}
		100% {
			transform: translateX(-40%);
		}
	}
</style>
